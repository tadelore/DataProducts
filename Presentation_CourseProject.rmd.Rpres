Presentation_CourseProject.rmd
========================================================
author: Temilade A. Sorungbe
date: 9 December 2016
autosize: true

Course Project Description 
========================================================

This Shiny App performs 3 types of exploratory analyses on the speed (mph) of cars recorded in the cars dataset. The following are examples of the 3 types of exploratory analyses:

Data summary
```{r data summary example, echo=FALSE, height=3, width=3}
library(datasets)
summary(chickwts[,1])
```

```{r histogram example, echo=FALSE, fig.height=5, fig.width=6}
library(datasets)
hist(chickwts[,1], main="Distribution of chick weigts", xlab = "weight")

boxplot(chickwts[,1])
title(main="Boxplot of chick weights", ylab="weights")
```

Shiny App Code - User Interface (UI)
========================================================
The following code sets up the user interface for the interactive shiny app 

```{r shiny app, echo=TRUE, eval=FALSE}
library(shiny)
library(webshot)

ui = fluidPage(

  # Sidebar with controls to select analysis
    
  sidebarLayout(
    sidebarPanel(
      
      selectInput("analysis", 
                  label = "Choose a type of exploratory analysis:", 
                  choices = c("Data Summary", "Histogram", "Boxplot"),
                  selected = "Histogram"),
    
    submitButton("Update View")
    
    ),
  
    # Show the histogram, box plot or data summary of the dataset 
    
    mainPanel(
      h4("Data Summary"),
      tableOutput("summary"),
      
      h4("Histogram"),
      plotOutput("Histogram"),
      
      h4("Boxplot"),
      plotOutput("Boxplot")
    )
  )
)

```


Shiny App Code - Server
========================================================
The following code is the server logic required to view the interactive shiny app

```{r shiny app server, echo=TRUE, eval=FALSE}

server = function(input, output) {
  
  # By declaring analysisInput as a reactive expression we ensure 
  # that:
  #
  #  1) It is only called when the inputs it depends on changes
  #  2) The computation and result are shared by all the callers 
  #	  (it only executes a single time)
  
  analysisInput <- reactive({
    switch(input$analysis,
           "Histogram" = 1,
           "Boxplot" = 2,
           "Data Summary" = 3)
  })
  
  # The output$summary, output$Boxplot and output$Histogram depends 
  # on the analysisInput reactive expression, so will be re-executed whenever 
  # analysisInput is invalidated (i.e. whenever the input$analysis changes)
  
    
  output$summary <- renderPrint ({ 
    analysis <- analysisInput()
    if (analysis == 3) {summary(cars[,1])}
  })
  
  output$Boxplot <- renderPlot ({ 
    analysis <- analysisInput()
    if (analysis == 2) {
      boxplot(cars[,1]) 
      title(main = "1920s Cars - Boxplot", ylab = "Speed (mph)")}
  })
  
  output$Histogram <- renderPlot({
    analysis <- analysisInput()
    if (analysis == 1) {
    hist(cars[,1], breaks = 10, col = 'darkgray', border = 'white',
      main = "1920s Cars - Distribution",
      xlab = "Speed (mph)")
      }
  })

}

```

The App 
========================================================

Click on the link toview the shiny app

http://127.0.0.1:5915/ShinyApp_CourseProject.rmd

